{"pageProps":{"ReactType":"// Type definitions for React 18.2\n// Project: https://react.dev/\n// Definitions by: Asana <https://asana.com>\n// AssureSign <http://www.assuresign.com>\n// Microsoft <https://microsoft.com>\n// John Reilly <https://github.com/johnnyreilly>\n// Benoit Benezech <https://github.com/bbenezech>\n// Patricio Zavolinsky <https://github.com/pzavolinsky>\n// Eric Anderson <https://github.com/ericanderson>\n// Dovydas Navickas <https://github.com/DovydasNavickas>\n// Josh Rutherford <https://github.com/theruther4d>\n// Guilherme Hübner <https://github.com/guilhermehubner>\n// Ferdy Budhidharma <https://github.com/ferdaber>\n// Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n// Olivier Pascal <https://github.com/pascaloliv>\n// Martin Hochel <https://github.com/hotell>\n// Frank Li <https://github.com/franklixuefei>\n// Jessica Franco <https://github.com/Jessidhia>\n// Saransh Kataria <https://github.com/saranshkataria>\n// Kanitkorn Sujautra <https://github.com/lukyth>\n// Sebastian Silbermann <https://github.com/eps1lon>\n// Kyle Scully <https://github.com/zieka>\n// Cong Zhang <https://github.com/dancerphil>\n// Dimitri Mitropoulos <https://github.com/dimitropoulos>\n// JongChan Choi <https://github.com/disjukr>\n// Victor Magalhães <https://github.com/vhfmag>\n// Dale Tan <https://github.com/hellatan>\n// Priyanshu Rav <https://github.com/priyanshurav>\n// Dmitry Semigradsky <https://github.com/Semigradsky>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\nimport { Interaction as SchedulerInteraction } from 'scheduler/tracing';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\ntype CrossOrigin = 'anonymous' | 'use-credentials' | '' | undefined;\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n// Destructors are only allowed to return void.\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line @definitelytyped/export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n //\n // React Elements\n // ----------------------------------------------------------------------\n\n type ElementType<P = any> =\n {\n [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n }[keyof JSX.IntrinsicElements] |\n ComponentType<P>;\n type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n type JSXElementConstructor<P> =\n | ((\n props: P,\n /**\n * @deprecated https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components\n */\n deprecatedLegacyContext?: any,\n ) => ReactNode)\n | (new (\n props: P,\n /**\n * @deprecated https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods\n */\n deprecatedLegacyContext?: any,\n ) => Component<any, any>);\n\n interface RefObject<T> {\n readonly current: T | null;\n }\n // Bivariance hack for consistent unsoundness with RefObject\n type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n type Ref<T> = RefCallback<T> | RefObject<T> | null;\n type LegacyRef<T> = string | Ref<T>;\n /**\n * Gets the instance type for a React element. The instance will be different for various component types:\n *\n * - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n * and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n * - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n * (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n * - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n * `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n * - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n * to component.\n *\n * `C` must be the type _of_ a React component so you need to use typeof as in `React.ElementRef<typeof MyComponent>`.\n *\n * @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n * `React.forwardRef()` returns.\n */\n type ElementRef<\n C extends\n | ForwardRefExoticComponent<any>\n | { new (props: any): Component<any> }\n | ((props: any, context?: any) => ReactNode)\n | keyof JSX.IntrinsicElements\n > =\n // need to check first if `ref` is a valid prop for ts@3.0\n // otherwise it will infer `{}` instead of `never`\n \"ref\" extends keyof ComponentPropsWithRef<C>\n ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n infer Instance\n >\n ? Instance\n : never\n : never;\n\n type ComponentState = any;\n\n type Key = string | number;\n\n /**\n * @internal You shouldn't need to use this type since you never see these attributes\n * inside your component or have to validate them.\n */\n interface Attributes {\n key?: Key | null | undefined;\n }\n interface RefAttributes<T> extends Attributes {\n /**\n * Allows getting a ref to the component instance.\n * Once the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n * @see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom\n */\n ref?: Ref<T> | undefined;\n }\n interface ClassAttributes<T> extends Attributes {\n /**\n * Allows getting a ref to the component instance.\n * Once the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n * @see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom\n */\n ref?: LegacyRef<T> | undefined;\n }\n\n interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n type: T;\n props: P;\n key: Key | null;\n }\n\n interface ReactComponentElement<\n T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n > extends ReactElement<P, Exclude<T, number>> { }\n\n interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n ref?: ('ref' extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n }\n\n type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n ref?: LegacyRef<T> | undefined;\n }\n\n type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n // string fallback for custom web-components\n interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n ref: LegacyRef<T>;\n }\n\n // ReactHTML for ReactHTMLElement\n interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n type: keyof ReactHTML;\n }\n\n // ReactSVG for ReactSVGElement\n interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n type: keyof ReactSVG;\n }\n\n interface ReactPortal extends ReactElement {\n key: Key | null;\n children: ReactNode;\n }\n\n //\n // Factories\n // ----------------------------------------------------------------------\n\n type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n /**\n * @deprecated Please use `FunctionComponentFactory`\n */\n type SFCFactory<P> = FunctionComponentFactory<P>;\n\n type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n type ComponentFactory<P, T extends Component<P, ComponentState>> =\n (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n }\n\n interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n }\n\n /**\n * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n */\n type ReactText = string | number;\n /**\n * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n */\n type ReactChild = ReactElement | string | number;\n\n /**\n * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n */\n interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n /**\n * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n */\n type ReactFragment = Iterable<ReactNode>;\n\n /**\n * For internal usage only.\n * Different release channels declare additional types of ReactNode this particular release channel accepts.\n * App or library types should never augment this interface.\n */\n interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}\n type ReactNode =\n | ReactElement\n | string\n | number\n | Iterable<ReactNode>\n | ReactPortal\n | boolean\n | null\n | undefined\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES];\n\n //\n // Top Level API\n // ----------------------------------------------------------------------\n\n // DOM Elements\n function createFactory<T extends HTMLElement>(\n type: keyof ReactHTML): HTMLFactory<T>;\n function createFactory(\n type: keyof ReactSVG): SVGFactory;\n function createFactory<P extends DOMAttributes<T>, T extends Element>(\n type: string): DOMFactory<P, T>;\n\n // Custom components\n function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n function createFactory<P>(\n type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n type: ClassType<P, T, C>): CFactory<P, T>;\n function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n // DOM Elements\n // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n function createElement(\n type: \"input\",\n props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n type: keyof ReactHTML,\n props?: ClassAttributes<T> & P | null,\n ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n type: keyof ReactSVG,\n props?: ClassAttributes<T> & P | null,\n ...children: ReactNode[]): ReactSVGElement;\n function createElement<P extends DOMAttributes<T>, T extends Element>(\n type: string,\n props?: ClassAttributes<T> & P | null,\n ...children: ReactNode[]): DOMElement<P, T>;\n\n // Custom components\n\n function createElement<P extends {}>(\n type: FunctionComponent<P>,\n props?: Attributes & P | null,\n ...children: ReactNode[]): FunctionComponentElement<P>;\n function createElement<P extends {}>(\n type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n type: ClassType<P, T, C>,\n props?: ClassAttributes<T> & P | null,\n ...children: ReactNode[]): CElement<P, T>;\n function createElement<P extends {}>(\n type: FunctionComponent<P> | ComponentClass<P> | string,\n props?: Attributes & P | null,\n ...children: ReactNode[]): ReactElement<P>;\n\n // DOM Elements\n // ReactHTMLElement\n function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n element: DetailedReactHTMLElement<P, T>,\n props?: P,\n ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n // ReactHTMLElement, less specific\n function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n element: ReactHTMLElement<T>,\n props?: P,\n ...children: ReactNode[]): ReactHTMLElement<T>;\n // SVGElement\n function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n element: ReactSVGElement,\n props?: P,\n ...children: ReactNode[]): ReactSVGElement;\n // DOM Element (has to be the last, because type checking stops at first overload that fits)\n function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n element: DOMElement<P, T>,\n props?: DOMAttributes<T> & P,\n ...children: ReactNode[]): DOMElement<P, T>;\n\n // Custom components\n function cloneElement<P>(\n element: FunctionComponentElement<P>,\n props?: Partial<P> & Attributes,\n ...children: ReactNode[]): FunctionComponentElement<P>;\n function cloneElement<P, T extends Component<P, ComponentState>>(\n element: CElement<P, T>,\n props?: Partial<P> & ClassAttributes<T>,\n ...children: ReactNode[]): CElement<P, T>;\n function cloneElement<P>(\n element: ReactElement<P>,\n props?: Partial<P> & Attributes,\n ...children: ReactNode[]): ReactElement<P>;\n\n // Context via RenderProps\n interface ProviderProps<T> {\n value: T;\n children?: ReactNode | undefined;\n }\n\n interface ConsumerProps<T> {\n children: (value: T) => ReactNode;\n }\n\n // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n // by pretending to be a normal component.\n //\n // We don't just use ComponentType or FunctionComponent types because you are not supposed to attach statics to this\n // object, but rather to the original function.\n interface ExoticComponent<P = {}> {\n /**\n * **NOTE**: Exotic components are not callable.\n */\n (props: P): ReactNode;\n readonly $$typeof: symbol;\n }\n\n interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n displayName?: string | undefined;\n }\n\n interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n propTypes?: WeakValidationMap<P> | undefined;\n }\n\n type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n // NOTE: only the Context object itself can get a displayName\n // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n interface Context<T> {\n Provider: Provider<T>;\n Consumer: Consumer<T>;\n displayName?: string | undefined;\n }\n function createContext<T>(\n // If you thought this should be optional, see\n // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n defaultValue: T,\n ): Context<T>;\n\n function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n // Sync with `ReactChildren` until `ReactChildren` is removed.\n const Children: {\n map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n count(children: any): number;\n only<C>(children: C): C extends any[] ? never : C;\n toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n };\n const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n interface SuspenseProps {\n children?: ReactNode | undefined;\n\n /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n fallback?: ReactNode;\n }\n\n const Suspense: ExoticComponent<SuspenseProps>;\n const version: string;\n\n /**\n * {@link https://react.dev/reference/react/Profiler#onrender-callback Profiler API}\n */\n type ProfilerOnRenderCallback = (\n id: string,\n phase: \"mount\" | \"update\",\n actualDuration: number,\n baseDuration: number,\n startTime: number,\n commitTime: number,\n interactions: Set<SchedulerInteraction>,\n ) => void;\n interface ProfilerProps {\n children?: ReactNode | undefined;\n id: string;\n onRender: ProfilerOnRenderCallback;\n }\n\n const Profiler: ExoticComponent<ProfilerProps>;\n\n //\n // Component API\n // ----------------------------------------------------------------------\n\n type ReactInstance = Component<any> | Element;\n\n // Base component for plain JS classes\n interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n class Component<P, S> {\n // tslint won't let me format the sample code in a way that vscode likes it :(\n /**\n * If set, `this.context` will be set at runtime to the current value of the given Context.\n *\n * Usage:\n *\n * ```ts\n * type MyContext = number\n * const Ctx = React.createContext<MyContext>(0)\n *\n * class Foo extends React.Component {\n * static contextType = Ctx\n * context!: React.ContextType<typeof Ctx>\n * render () {\n * return <>My context's value: {this.context}</>;\n * }\n * }\n * ```\n *\n * @see https://react.dev/reference/react/Component#static-contexttype\n */\n static contextType?: Context<any> | undefined;\n\n /**\n * If using the new style context, re-declare this in your class to be the\n * `React.ContextType` of your `static contextType`.\n * Should be used with type annotation or static contextType.\n *\n * ```ts\n * static contextType = MyContext\n * // For TS pre-3.7:\n * context!: React.ContextType<typeof MyContext>\n * // For TS 3.7 and above:\n * declare context: React.ContextType<typeof MyContext>\n * ```\n *\n * @see https://react.dev/reference/react/Component#context\n */\n context: unknown;\n\n constructor(props: Readonly<P> | P);\n /**\n * @deprecated\n * @see https://legacy.reactjs.org/docs/legacy-context.html\n */\n constructor(props: P, context: any);\n\n // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n // Also, the ` | S` allows intellisense to not be dumbisense\n setState<K extends keyof S>(\n state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n callback?: () => void\n ): void;\n\n forceUpdate(callback?: () => void): void;\n render(): ReactNode;\n\n readonly props: Readonly<P>;\n state: Readonly<S>;\n /**\n * @deprecated\n * https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n */\n refs: {\n [key: string]: ReactInstance\n };\n }\n\n class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n replaceState(nextState: S, callback?: () => void): void;\n isMounted(): boolean;\n getInitialState?(): S;\n }\n\n interface ChildContextProvider<CC> {\n getChildContext(): CC;\n }\n\n //\n // Class Interfaces\n // ----------------------------------------------------------------------\n\n type FC<P = {}> = FunctionComponent<P>;\n\n interface FunctionComponent<P = {}> {\n (props: P, context?: any): ReactNode;\n propTypes?: WeakValidationMap<P> | undefined;\n contextTypes?: ValidationMap<any> | undefined;\n defaultProps?: Partial<P> | undefined;\n displayName?: string | undefined;\n }\n\n /**\n * @deprecated - Equivalent with `React.FC`.\n */\n type VFC<P = {}> = VoidFunctionComponent<P>;\n\n /**\n * @deprecated - Equivalent with `React.FunctionComponent`.\n */\n interface VoidFunctionComponent<P = {}> {\n (props: P, context?: any): ReactNode;\n propTypes?: WeakValidationMap<P> | undefined;\n contextTypes?: ValidationMap<any> | undefined;\n defaultProps?: Partial<P> | undefined;\n displayName?: string | undefined;\n }\n\n type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n interface ForwardRefRenderFunction<T, P = {}> {\n (props: P, ref: ForwardedRef<T>): ReactNode;\n displayName?: string | undefined;\n // explicit rejected with `never` required due to\n // https://github.com/microsoft/TypeScript/issues/36826\n /**\n * defaultProps are not supported on render functions\n */\n defaultProps?: never | undefined;\n /**\n * propTypes are not supported on render functions\n */\n propTypes?: never | undefined;\n }\n\n interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n new (props: P, context?: any): Component<P, S>;\n propTypes?: WeakValidationMap<P> | undefined;\n contextType?: Context<any> | undefined;\n contextTypes?: ValidationMap<any> | undefined;\n childContextTypes?: ValidationMap<any> | undefined;\n defaultProps?: Partial<P> | undefined;\n displayName?: string | undefined;\n }\n\n interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n getDefaultProps?(): P;\n }\n\n /**\n * We use an intersection type to infer multiple type parameters from\n * a single argument, which is useful for many top-level API defs.\n * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n */\n type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n C &\n (new (props: P, context?: any) => T);\n\n //\n // Component Specs and Lifecycle\n // ----------------------------------------------------------------------\n\n // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n // methods are present.\n interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n /**\n * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n */\n componentDidMount?(): void;\n /**\n * Called to determine whether the change in props and state should trigger a re-render.\n *\n * `Component` always returns true.\n * `PureComponent` implements a shallow comparison on props and state and returns true if any\n * props or states have changed.\n *\n * If false is returned, `Component#render`, `componentWillUpdate`\n * and `componentDidUpdate` will not be called.\n */\n shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n /**\n * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n */\n componentWillUnmount?(): void;\n /**\n * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n * the entire component tree to unmount.\n */\n componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n }\n\n // Unfortunately, we have no way of declaring that the component constructor must implement this\n interface StaticLifecycle<P, S> {\n getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n }\n\n type GetDerivedStateFromProps<P, S> =\n /**\n * Returns an update to a component's state based on its new props and old state.\n *\n * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n */\n (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n type GetDerivedStateFromError<P, S> =\n /**\n * This lifecycle is invoked after an error has been thrown by a descendant component.\n * It receives the error that was thrown as a parameter and should return a value to update state.\n *\n * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n */\n (error: any) => Partial<S> | null;\n\n // This should be \"infer SS\" but can't use it yet\n interface NewLifecycle<P, S, SS> {\n /**\n * Runs before React applies the result of `render` to the document, and\n * returns an object to be given to componentDidUpdate. Useful for saving\n * things such as scroll position before `render` causes changes to it.\n *\n * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n * lifecycle events from running.\n */\n getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n /**\n * Called immediately after updating occurs. Not called for the initial render.\n *\n * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n */\n componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n }\n\n interface DeprecatedLifecycle<P, S> {\n /**\n * Called immediately before mounting occurs, and before `Component#render`.\n * Avoid introducing any side-effects or subscriptions in this method.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n componentWillMount?(): void;\n /**\n * Called immediately before mounting occurs, and before `Component#render`.\n * Avoid introducing any side-effects or subscriptions in this method.\n *\n * This method will not stop working in React 17.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use componentDidMount or the constructor instead\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n UNSAFE_componentWillMount?(): void;\n /**\n * Called when the component may be receiving new props.\n * React may call this even if props have not changed, so be sure to compare new and existing\n * props if you only want to handle changes.\n *\n * Calling `Component#setState` generally does not trigger this method.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n /**\n * Called when the component may be receiving new props.\n * React may call this even if props have not changed, so be sure to compare new and existing\n * props if you only want to handle changes.\n *\n * Calling `Component#setState` generally does not trigger this method.\n *\n * This method will not stop working in React 17.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use static getDerivedStateFromProps instead\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n /**\n * Called immediately before rendering when new props or state is received. Not called for the initial render.\n *\n * Note: You cannot call `Component#setState` here.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n /**\n * Called immediately before rendering when new props or state is received. Not called for the initial render.\n *\n * Note: You cannot call `Component#setState` here.\n *\n * This method will not stop working in React 17.\n *\n * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n * prevents this from being invoked.\n *\n * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n */\n UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n }\n\n interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n mixins?: Array<Mixin<P, S>> | undefined;\n statics?: {\n [key: string]: any;\n } | undefined;\n\n displayName?: string | undefined;\n propTypes?: ValidationMap<any> | undefined;\n contextTypes?: ValidationMap<any> | undefined;\n childContextTypes?: ValidationMap<any> | undefined;\n\n getDefaultProps?(): P;\n getInitialState?(): S;\n }\n\n interface ComponentSpec<P, S> extends Mixin<P, S> {\n render(): ReactNode;\n\n [propertyName: string]: any;\n }\n\n function createRef<T>(): RefObject<T>;\n\n // will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n // but can be given its own specific name\n interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n defaultProps?: Partial<P> | undefined;\n propTypes?: WeakValidationMap<P> | undefined;\n }\n\n function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n /** Ensures that the props do not include ref at all */\n type PropsWithoutRef<P> =\n // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n // https://github.com/Microsoft/TypeScript/issues/28339\n P extends any ? ('ref' extends keyof P ? Omit<P, 'ref'> : P) : P;\n /** Ensures that the props do not include string ref, which cannot be forwarded */\n type PropsWithRef<P> =\n // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n 'ref' extends keyof P\n ? P extends { ref?: infer R | undefined }\n ? string extends R\n ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n : P\n : P\n : P;\n\n type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };\n\n /**\n * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n * or ComponentPropsWithoutRef when refs are not supported.\n */\n type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n T extends JSXElementConstructor<infer P>\n ? P\n : T extends keyof JSX.IntrinsicElements\n ? JSX.IntrinsicElements[T]\n : {};\n type ComponentPropsWithRef<T extends ElementType> =\n T extends (new (props: infer P) => Component<any, any>)\n ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n : PropsWithRef<ComponentProps<T>>;\n type ComponentPropsWithoutRef<T extends ElementType> =\n PropsWithoutRef<ComponentProps<T>>;\n\n type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n >\n ? Method\n : ComponentPropsWithRef<T> extends RefAttributes<infer Method>\n ? Method\n : never;\n\n // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n // but can be given its own specific name\n type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n readonly type: T;\n };\n\n function memo<P extends object>(\n Component: FunctionComponent<P>,\n propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean\n ): NamedExoticComponent<P>;\n function memo<T extends ComponentType<any>>(\n Component: T,\n propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n ): MemoExoticComponent<T>;\n\n type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n readonly _result: T;\n };\n\n function lazy<T extends ComponentType<any>>(\n factory: () => Promise<{ default: T }>\n ): LazyExoticComponent<T>;\n\n //\n // React Hooks\n // ----------------------------------------------------------------------\n\n // based on the code in https://github.com/facebook/react/pull/13968\n\n // Unlike the class component setState, the updates are not allowed to be partial\n type SetStateAction<S> = S | ((prevState: S) => S);\n // this technically does accept a second argument, but it's already under a deprecation warning\n // and it's not even released so probably better to not define it.\n type Dispatch<A> = (value: A) => void;\n // Since action _can_ be undefined, dispatch may be called without any parameters.\n type DispatchWithoutAction = () => void;\n // Unlike redux, the actions _can_ be anything\n type Reducer<S, A> = (prevState: S, action: A) => S;\n // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n type ReducerWithoutAction<S> = (prevState: S) => S;\n // types used to try and prevent the compiler from reducing S\n // to a supertype common with the second argument to useReducer()\n type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n R extends ReducerWithoutAction<infer S> ? S : never;\n type DependencyList = ReadonlyArray<unknown>;\n\n // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n type EffectCallback = () => (void | Destructor);\n\n interface MutableRefObject<T> {\n current: T;\n }\n\n // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n /**\n * Accepts a context object (the value returned from `React.createContext`) and returns the current\n * context value, as given by the nearest context provider for the given context.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useContext\n */\n function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n /**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useState\n */\n function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n // convenience overload when first argument is omitted\n /**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useState\n */\n function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n /**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useReducer\n */\n // overload where dispatch could accept 0 arguments.\n function useReducer<R extends ReducerWithoutAction<any>, I>(\n reducer: R,\n initializerArg: I,\n initializer: (arg: I) => ReducerStateWithoutAction<R>\n ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n /**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useReducer\n */\n // overload where dispatch could accept 0 arguments.\n function useReducer<R extends ReducerWithoutAction<any>>(\n reducer: R,\n initializerArg: ReducerStateWithoutAction<R>,\n initializer?: undefined\n ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n /**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useReducer\n */\n // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n function useReducer<R extends Reducer<any, any>, I>(\n reducer: R,\n initializerArg: I & ReducerState<R>,\n initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n /**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useReducer\n */\n // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n function useReducer<R extends Reducer<any, any>, I>(\n reducer: R,\n initializerArg: I,\n initializer: (arg: I) => ReducerState<R>\n ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n /**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useReducer\n */\n\n // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n // supertype between the reducer's return type and the initialState (or the initializer's return type),\n // which would prevent autocompletion from ever working.\n\n // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n // in older versions, or a regression in newer versions of the typescript completion service.\n function useReducer<R extends Reducer<any, any>>(\n reducer: R,\n initialState: ReducerState<R>,\n initializer?: undefined\n ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n /**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useRef\n */\n function useRef<T>(initialValue: T): MutableRefObject<T>;\n // convenience overload for refs given as a ref prop as they typically start with a null value\n /**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n * of the generic argument.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useRef\n */\n function useRef<T>(initialValue: T|null): RefObject<T>;\n // convenience overload for potentially undefined initialValue / call with 0 arguments\n // has a default to stop it from defaulting to {} instead\n /**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useRef\n */\n function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n /**\n * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n *\n * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n *\n * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n * `componentDidMount` and `componentDidUpdate`.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useLayoutEffect\n */\n function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n /**\n * Accepts a function that contains imperative, possibly effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list change.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useEffect\n */\n function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n /**\n * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n * `ref`. As always, imperative code using refs should be avoided in most cases.\n *\n * `useImperativeHandle` should be used with `React.forwardRef`.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useImperativeHandle\n */\n function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n /**\n * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n * has changed.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useCallback\n */\n // A specific function type would not trigger implicit any.\n // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.\n // tslint:disable-next-line ban-types\n function useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n /**\n * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useMemo\n */\n // allow undefined, but don't make it optional as that is very likely a mistake\n function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n /**\n * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n *\n * NOTE: We don’t recommend adding debug values to every custom hook.\n * It’s most valuable for custom hooks that are part of shared libraries.\n *\n * @version 16.8.0\n * @see https://react.dev/reference/react/useDebugValue\n */\n // the name of the custom hook is itself derived from the function name at runtime:\n // it's just the function name without the \"use\" prefix.\n function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n // must be synchronous\n export type TransitionFunction = () => VoidOrUndefinedOnly;\n // strange definition to allow vscode to show documentation on the invocation\n export interface TransitionStartFunction {\n /**\n * State updates caused inside the callback are allowed to be deferred.\n *\n * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n *\n * @param callback A _synchronous_ function which causes state updates that can be deferred.\n */\n (callback: TransitionFunction): void;\n }\n\n /**\n * Returns a deferred version of the value that may “lag behind” it.\n *\n * This is commonly used to keep the interface responsive when you have something that renders immediately\n * based on user input and something that needs to wait for a data fetch.\n *\n * A good example of this is a text input.\n *\n * @param value The value that is going to be deferred\n *\n * @see https://react.dev/reference/react/useDeferredValue\n */\n export function useDeferredValue<T>(value: T): T;\n\n /**\n * Allows components to avoid undesirable loading states by waiting for content to load\n * before transitioning to the next screen. It also allows components to defer slower,\n * data fetching updates until subsequent renders so that more crucial updates can be\n * rendered immediately.\n *\n * The `useTransition` hook returns two values in an array.\n *\n * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\n * The second is a function that takes a callback. We can use it to tell React which state we want to defer.\n *\n * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**`\n *\n * @see https://react.dev/reference/react/useTransition\n */\n export function useTransition(): [boolean, TransitionStartFunction];\n\n /**\n * Similar to `useTransition` but allows uses where hooks are not available.\n *\n * @param callback A _synchronous_ function which causes state updates that can be deferred.\n */\n export function startTransition(scope: TransitionFunction): void;\n\n export function useId(): string;\n\n /**\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list change.\n *\n * @see https://github.com/facebook/react/pull/21913\n */\n export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;\n\n /**\n * @param subscribe\n * @param getSnapshot\n *\n * @see https://github.com/reactwg/react-18/discussions/86\n */\n // keep in sync with `useSyncExternalStore` from `use-sync-external-store`\n export function useSyncExternalStore<Snapshot>(\n subscribe: (onStoreChange: () => void) => () => void,\n getSnapshot: () => Snapshot,\n getServerSnapshot?: () => Snapshot,\n ): Snapshot;\n\n //\n // Event System\n // ----------------------------------------------------------------------\n // TODO: change any to unknown when moving to TS v3\n interface BaseSyntheticEvent<E = object, C = any, T = any> {\n nativeEvent: E;\n currentTarget: C;\n target: T;\n bubbles: boolean;\n cancelable: boolean;\n defaultPrevented: boolean;\n eventPhase: number;\n isTrusted: boolean;\n preventDefault(): void;\n isDefaultPrevented(): boolean;\n stopPropagation(): void;\n isPropagationStopped(): boolean;\n persist(): void;\n timeStamp: number;\n type: string;\n }\n\n /**\n * currentTarget - a reference to the element on which the event listener is registered.\n *\n * target - a reference to the element from which the event was originally dispatched.\n * This might be a child element to the element on which the event listener is registered.\n * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n */\n interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n clipboardData: DataTransfer;\n }\n\n interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n data: string;\n }\n\n interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n dataTransfer: DataTransfer;\n }\n\n interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n pointerId: number;\n pressure: number;\n tangentialPressure: number;\n tiltX: number;\n tiltY: number;\n twist: number;\n width: number;\n height: number;\n pointerType: 'mouse' | 'pen' | 'touch';\n isPrimary: boolean;\n }\n\n interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n relatedTarget: (EventTarget & RelatedTarget) | null;\n target: EventTarget & Target;\n }\n\n interface FormEvent<T = Element> extends SyntheticEvent<T> {\n }\n\n interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n target: EventTarget & T;\n }\n\n interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n target: EventTarget & T;\n }\n\n export type ModifierKey = \"Alt\" | \"AltGraph\" | \"CapsLock\" | \"Control\" | \"Fn\" | \"FnLock\" | \"Hyper\" | \"Meta\" | \"NumLock\" | \"ScrollLock\" | \"Shift\" | \"Super\" | \"Symbol\" | \"SymbolLock\";\n\n interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n altKey: boolean;\n /** @deprecated */\n charCode: number;\n ctrlKey: boolean;\n code: string;\n /**\n * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n */\n getModifierState(key: ModifierKey): boolean;\n /**\n * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n */\n key: string;\n /** @deprecated */\n keyCode: number;\n locale: string;\n location: number;\n metaKey: boolean;\n repeat: boolean;\n shiftKey: boolean;\n /** @deprecated */\n which: number;\n }\n\n interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n altKey: boolean;\n button: number;\n buttons: number;\n clientX: number;\n clientY: number;\n ctrlKey: boolean;\n /**\n * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n */\n getModifierState(key: ModifierKey): boolean;\n metaKey: boolean;\n movementX: number;\n movementY: number;\n pageX: number;\n pageY: number;\n relatedTarget: EventTarget | null;\n screenX: number;\n screenY: number;\n shiftKey: boolean;\n }\n\n interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n altKey: boolean;\n changedTouches: TouchList;\n ctrlKey: boolean;\n /**\n * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n */\n getModifierState(key: ModifierKey): boolean;\n metaKey: boolean;\n shiftKey: boolean;\n targetTouches: TouchList;\n touches: TouchList;\n }\n\n interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n detail: number;\n view: AbstractView;\n }\n\n interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n deltaMode: number;\n deltaX: number;\n deltaY: number;\n deltaZ: number;\n }\n\n interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n animationName: string;\n elapsedTime: number;\n pseudoElement: string;\n }\n\n interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n elapsedTime: number;\n propertyName: string;\n pseudoElement: string;\n }\n\n //\n // Event Handler Types\n // ----------------------------------------------------------------------\n\n type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n //\n // Props / DOM Attributes\n // ----------------------------------------------------------------------\n\n interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n }\n\n type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n }\n\n interface SVGLineElementAttributes<T> extends SVGProps<T> {}\n interface SVGTextElementAttributes<T> extends SVGProps<T> {}\n\n interface DOMAttributes<T> {\n children?: ReactNode | undefined;\n dangerouslySetInnerHTML?: {\n // Should be InnerHTML['innerHTML'].\n // But unfortunately we're mixing renderer-specific type declarations.\n __html: string | TrustedHTML;\n } | undefined;\n\n // Clipboard Events\n onCopy?: ClipboardEventHandler<T> | undefined;\n onCopyCapture?: ClipboardEventHandler<T> | undefined;\n onCut?: ClipboardEventHandler<T> | undefined;\n onCutCapture?: ClipboardEventHandler<T> | undefined;\n onPaste?: ClipboardEventHandler<T> | undefined;\n onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n // Composition Events\n onCompositionEnd?: CompositionEventHandler<T> | undefined;\n onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n onCompositionStart?: CompositionEventHandler<T> | undefined;\n onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n // Focus Events\n onFocus?: FocusEventHandler<T> | undefined;\n onFocusCapture?: FocusEventHandler<T> | undefined;\n onBlur?: FocusEventHandler<T> | undefined;\n onBlurCapture?: FocusEventHandler<T> | undefined;\n\n // Form Events\n onChange?: FormEventHandler<T> | undefined;\n onChangeCapture?: FormEventHandler<T> | undefined;\n onBeforeInput?: FormEventHandler<T> | undefined;\n onBeforeInputCapture?: FormEventHandler<T> | undefined;\n onInput?: FormEventHandler<T> | undefined;\n onInputCapture?: FormEventHandler<T> | undefined;\n onReset?: FormEventHandler<T> | undefined;\n onResetCapture?: FormEventHandler<T> | undefined;\n onSubmit?: FormEventHandler<T> | undefined;\n onSubmitCapture?: FormEventHandler<T> | undefined;\n onInvalid?: FormEventHandler<T> | undefined;\n onInvalidCapture?: FormEventHandler<T> | undefined;\n\n // Image Events\n onLoad?: ReactEventHandler<T> | undefined;\n onLoadCapture?: ReactEventHandler<T> | undefined;\n onError?: ReactEventHandler<T> | undefined; // also a Media Event\n onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n // Keyboard Events\n onKeyDown?: KeyboardEventHandler<T> | undefined;\n onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n /** @deprecated */\n onKeyPress?: KeyboardEventHandler<T> | undefined;\n /** @deprecated */\n onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n onKeyUp?: KeyboardEventHandler<T> | undefined;\n onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n // Media Events\n onAbort?: ReactEventHandler<T> | undefined;\n onAbortCapture?: ReactEventHandler<T> | undefined;\n onCanPlay?: ReactEventHandler<T> | undefined;\n onCanPlayCapture?: ReactEventHandler<T> | undefined;\n onCanPlayThrough?: ReactEventHandler<T> | undefined;\n onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n onDurationChange?: ReactEventHandler<T> | undefined;\n onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n onEmptied?: ReactEventHandler<T> | undefined;\n onEmptiedCapture?: ReactEventHandler<T> | undefined;\n onEncrypted?: ReactEventHandler<T> | undefined;\n onEncryptedCapture?: ReactEventHandler<T> | undefined;\n onEnded?: ReactEventHandler<T> | undefined;\n onEndedCapture?: ReactEventHandler<T> | undefined;\n onLoadedData?: ReactEventHandler<T> | undefined;\n onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n onLoadedMetadata?: ReactEventHandler<T> | undefined;\n onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n onLoadStart?: ReactEventHandler<T> | undefined;\n onLoadStartCapture?: ReactEventHandler<T> | undefined;\n onPause?: ReactEventHandler<T> | undefined;\n onPauseCapture?: ReactEventHandler<T> | undefined;\n onPlay?: ReactEventHandler<T> | undefined;\n onPlayCapture?: ReactEventHandler<T> | undefined;\n onPlaying?: ReactEventHandler<T> | undefined;\n onPlayingCapture?: ReactEventHandler<T> | undefined;\n onProgress?: ReactEventHandler<T> | undefined;\n onProgressCapture?: ReactEventHandler<T> | undefined;\n onRateChange?: ReactEventHandler<T> | undefined;\n onRateChangeCapture?: ReactEventHandler<T> | undefined;\n onResize?: ReactEventHandler<T> | undefined;\n onResizeCapture?: ReactEventHandler<T> | undefined;\n onSeeked?: ReactEventHandler<T> | undefined;\n onSeekedCapture?: ReactEventHandler<T> | undefined;\n onSeeking?: ReactEventHandler<T> | undefined;\n onSeekingCapture?: ReactEventHandler<T> | undefined;\n onStalled?: ReactEventHandler<T> | undefined;\n onStalledCapture?: ReactEventHandler<T> | undefined;\n onSuspend?: ReactEventHandler<T> | undefined;\n onSuspendCapture?: ReactEventHandler<T> | undefined;\n onTimeUpdate?: ReactEventHandler<T> | undefined;\n onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n onVolumeChange?: ReactEventHandler<T> | undefined;\n onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n onWaiting?: ReactEventHandler<T> | undefined;\n onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n // MouseEvents\n onAuxClick?: MouseEventHandler<T> | undefined;\n onAuxClickCapture?: MouseEventHandler<T> | undefined;\n onClick?: MouseEventHandler<T> | undefined;\n onClickCapture?: MouseEventHandler<T> | undefined;\n onContextMenu?: MouseEventHandler<T> | undefined;\n onContextMenuCapture?: MouseEventHandler<T> | undefined;\n onDoubleClick?: MouseEventHandler<T> | undefined;\n onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n onDrag?: DragEventHandler<T> | undefined;\n onDragCapture?: DragEventHandler<T> | undefined;\n onDragEnd?: DragEventHandler<T> | undefined;\n onDragEndCapture?: DragEventHandler<T> | undefined;\n onDragEnter?: DragEventHandler<T> | undefined;\n onDragEnterCapture?: DragEventHandler<T> | undefined;\n onDragExit?: DragEventHandler<T> | undefined;\n onDragExitCapture?: DragEventHandler<T> | undefined;\n onDragLeave?: DragEventHandler<T> | undefined;\n onDragLeaveCapture?: DragEventHandler<T> | undefined;\n onDragOver?: DragEventHandler<T> | undefined;\n onDragOverCapture?: DragEventHandler<T> | undefined;\n onDragStart?: DragEventHandler<T> | undefined;\n onDragStartCapture?: DragEventHandler<T> | undefined;\n onDrop?: DragEventHandler<T> | undefined;\n onDropCapture?: DragEventHandler<T> | undefined;\n onMouseDown?: MouseEventHandler<T> | undefined;\n onMouseDownCapture?: MouseEventHandler<T> | undefined;\n onMouseEnter?: MouseEventHandler<T> | undefined;\n onMouseLeave?: MouseEventHandler<T> | undefined;\n onMouseMove?: MouseEventHandler<T> | undefined;\n onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n onMouseOut?: MouseEventHandler<T> | undefined;\n onMouseOutCapture?: MouseEventHandler<T> | undefined;\n onMouseOver?: MouseEventHandler<T> | undefined;\n onMouseOverCapture?: MouseEventHandler<T> | undefined;\n onMouseUp?: MouseEventHandler<T> | undefined;\n onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n // Selection Events\n onSelect?: ReactEventHandler<T> | undefined;\n onSelectCapture?: ReactEventHandler<T> | undefined;\n\n // Touch Events\n onTouchCancel?: TouchEventHandler<T> | undefined;\n onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n onTouchEnd?: TouchEventHandler<T> | undefined;\n onTouchEndCapture?: TouchEventHandler<T> | undefined;\n onTouchMove?: TouchEventHandler<T> | undefined;\n onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n onTouchStart?: TouchEventHandler<T> | undefined;\n onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n // Pointer Events\n onPointerDown?: PointerEventHandler<T> | undefined;\n onPointerDownCapture?: PointerEventHandler<T> | undefined;\n onPointerMove?: PointerEventHandler<T> | undefined;\n onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n onPointerUp?: PointerEventHandler<T> | undefined;\n onPointerUpCapture?: PointerEventHandler<T> | undefined;\n onPointerCancel?: PointerEventHandler<T> | undefined;\n onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n onPointerEnter?: PointerEventHandler<T> | undefined;\n onPointerEnterCapture?: PointerEventHandler<T> | undefined;\n onPointerLeave?: PointerEventHandler<T> | undefined;\n onPointerLeaveCapture?: PointerEventHandler<T> | undefined;\n onPointerOver?: PointerEventHandler<T> | undefined;\n onPointerOverCapture?: PointerEventHandler<T> | undefined;\n onPointerOut?: PointerEventHandler<T> | undefined;\n onPointerOutCapture?: PointerEventHandler<T> | undefined;\n onGotPointerCapture?: PointerEventHandler<T> | undefined;\n onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n onLostPointerCapture?: PointerEventHandler<T> | undefined;\n onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n // UI Events\n onScroll?: UIEventHandler<T> | undefined;\n onScrollCapture?: UIEventHandler<T> | undefined;\n\n // Wheel Events\n onWheel?: WheelEventHandler<T> | undefined;\n onWheelCapture?: WheelEventHandler<T> | undefined;\n\n // Animation Events\n onAnimationStart?: AnimationEventHandler<T> | undefined;\n onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n onAnimationEnd?: AnimationEventHandler<T> | undefined;\n onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n onAnimationIteration?: AnimationEventHandler<T> | undefined;\n onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n // Transition Events\n onTransitionEnd?: TransitionEventHandler<T> | undefined;\n onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n }\n\n export interface CSSProperties extends CSS.Properties<string | number> {\n /**\n * The index signature was removed to enable closed typing for style\n * using CSSType. You're able to use type assertion or module augmentation\n * to add properties or an index signature of your own.\n *\n * For examples and more information, visit:\n * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n */\n }\n\n // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n interface AriaAttributes {\n /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n 'aria-activedescendant'?: string | undefined;\n /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n 'aria-atomic'?: Booleanish | undefined;\n /**\n * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n * presented if they are made.\n */\n 'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both' | undefined;\n /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n /**\n * Defines a string value that labels the current element, which is intended to be converted into Braille.\n * @see aria-label.\n */\n 'aria-braillelabel'?: string | undefined;\n /**\n * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n * @see aria-roledescription.\n */\n 'aria-brailleroledescription'?: string | undefined;\n 'aria-busy'?: Booleanish | undefined;\n /**\n * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n * @see aria-pressed @see aria-selected.\n */\n 'aria-checked'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n /**\n * Defines the total number of columns in a table, grid, or treegrid.\n * @see aria-colindex.\n */\n 'aria-colcount'?: number | undefined;\n /**\n * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n * @see aria-colcount @see aria-colspan.\n */\n 'aria-colindex'?: number | undefined;\n /**\n * Defines a human readable text alternative of aria-colindex.\n * @see aria-rowindextext.\n */\n 'aria-colindextext'?: string | undefined;\n /**\n * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n * @see aria-colindex @see aria-rowspan.\n */\n 'aria-colspan'?: number | undefined;\n /**\n * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n * @see aria-owns.\n */\n 'aria-controls'?: string | undefined;\n /** Indicates the element that represents the current item within a container or set of related elements. */\n 'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time' | undefined;\n /**\n * Identifies the element (or elements) that describes the object.\n * @see aria-labelledby\n */\n 'aria-describedby'?: string | undefined;\n /**\n * Defines a string value that describes or annotates the current element.\n * @see related aria-describedby.\n */\n 'aria-description'?: string | undefined;\n /**\n * Identifies the element that provides a detailed, extended description for the object.\n * @see aria-describedby.\n */\n 'aria-details'?: string | undefined;\n /**\n * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n * @see aria-hidden @see aria-readonly.\n */\n 'aria-disabled'?: Booleanish | undefined;\n /**\n * Indicates what functions can be performed when a dragged object is released on the drop target.\n * @deprecated in ARIA 1.1\n */\n 'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup' | undefined;\n /**\n * Identifies the element that provides an error message for the object.\n * @see aria-invalid @see aria-describedby.\n */\n 'aria-errormessage'?: string | undefined;\n /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n 'aria-expanded'?: Booleanish | undefined;\n /**\n * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n * allows assistive technology to override the general default of reading in document source order.\n */\n 'aria-flowto'?: string | undefined;\n /**\n * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n * @deprecated in ARIA 1.1\n */\n 'aria-grabbed'?: Booleanish | undefined;\n /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n 'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog' | undefined;\n /**\n * Indicates whether the element is exposed to an accessibility API.\n * @see aria-disabled.\n */\n 'aria-hidden'?: Booleanish | undefined;\n /**\n * Indicates the entered value does not conform to the format expected by the application.\n * @see aria-errormessage.\n */\n 'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling' | undefined;\n /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n 'aria-keyshortcuts'?: string | undefined;\n /**\n * Defines a string value that labels the current element.\n * @see aria-labelledby.\n */\n 'aria-label'?: string | undefined;\n /**\n * Identifies the element (or elements) that labels the current element.\n * @see aria-describedby.\n */\n 'aria-labelledby'?: string | undefined;\n /** Defines the hierarchical level of an element within a structure. */\n 'aria-level'?: number | undefined;\n /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n 'aria-live'?: 'off' | 'assertive' | 'polite' | undefined;\n /** Indicates whether an element is modal when displayed. */\n 'aria-modal'?: Booleanish | undefined;\n /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n 'aria-multiline'?: Booleanish | undefined;\n /** Indicates that the user may select more than one item from the current selectable descendants. */\n 'aria-multiselectable'?: Booleanish | undefined;\n /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n 'aria-orientation'?: 'horizontal' | 'vertical' | undefined;\n /**\n * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n * @see aria-controls.\n */\n 'aria-owns'?: string | undefined;\n /**\n * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n * A hint could be a sample value or a brief description of the expected format.\n */\n 'aria-placeholder'?: string | undefined;\n /**\n * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n * @see aria-setsize.\n */\n 'aria-posinset'?: number | undefined;\n /**\n * Indicates the current \"pressed\" state of toggle buttons.\n * @see aria-checked @see aria-selected.\n */\n 'aria-pressed'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n /**\n * Indicates that the element is not editable, but is otherwise operable.\n * @see aria-disabled.\n */\n 'aria-readonly'?: Booleanish | undefined;\n /**\n * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n * @see aria-atomic.\n */\n 'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals' | undefined;\n /** Indicates that user input is required on the element before a form may be submitted. */\n 'aria-required'?: Booleanish | undefined;\n /** Defines a human-readable, author-localized description for the role of an element. */\n 'aria-roledescription'?: string | undefined;\n /**\n * Defines the total number of rows in a table, grid, or treegrid.\n * @see aria-rowindex.\n */\n 'aria-rowcount'?: number | undefined;\n /**\n * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n * @see aria-rowcount @see aria-rowspan.\n */\n 'aria-rowindex'?: number | undefined;\n /**\n * Defines a human readable text alternative of aria-rowindex.\n * @see aria-colindextext.\n */\n 'aria-rowindextext'?: string | undefined;\n /**\n * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n * @see aria-rowindex @see aria-colspan.\n */\n 'aria-rowspan'?: number | undefined;\n /**\n * Indicates the current \"selected\" state of various widgets.\n * @see aria-checked @see aria-pressed.\n */\n 'aria-selected'?: Booleanish | undefined;\n /**\n * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n * @see aria-posinset.\n */\n 'aria-setsize'?: number | undefined;\n /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n 'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other' | undefined;\n /** Defines the maximum allowed value for a range widget. */\n 'aria-valuemax'?: number | undefined;\n /** Defines the minimum allowed value for a range widget. */\n 'aria-valuemin'?: number | undefined;\n /**\n * Defines the current value for a range widget.\n * @see aria-valuetext.\n */\n 'aria-valuenow'?: number | undefined;\n /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n 'aria-valuetext'?: string | undefined;\n }\n\n // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n type AriaRole =\n | 'alert'\n | 'alertdialog'\n | 'application'\n | 'article'\n | 'banner'\n | 'button'\n | 'cell'\n | 'checkbox'\n | 'columnheader'\n | 'combobox'\n | 'complementary'\n | 'contentinfo'\n | 'definition'\n | 'dialog'\n | 'directory'\n | 'document'\n | 'feed'\n | 'figure'\n | 'form'\n | 'grid'\n | 'gridcell'\n | 'group'\n | 'heading'\n | 'img'\n | 'link'\n | 'list'\n | 'listbox'\n | 'listitem'\n | 'log'\n | 'main'\n | 'marquee'\n | 'math'\n | 'menu'\n | 'menubar'\n | 'menuitem'\n | 'menuitemcheckbox'\n | 'menuitemradio'\n | 'navigation'\n | 'none'\n | 'note'\n | 'option'\n | 'presentation'\n | 'progressbar'\n | 'radio'\n | 'radiogroup'\n | 'region'\n | 'row'\n | 'rowgroup'\n | 'rowheader'\n | 'scrollbar'\n | 'search'\n | 'searchbox'\n | 'separator'\n | 'slider'\n | 'spinbutton'\n | 'status'\n | 'switch'\n | 'tab'\n | 'table'\n | 'tablist'\n | 'tabpanel'\n | 'term'\n | 'textbox'\n | 'timer'\n | 'toolbar'\n | 'tooltip'\n | 'tree'\n | 'treegrid'\n | 'treeitem'\n | (string & {});\n\n interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n // React-specific Attributes\n defaultChecked?: boolean | undefined;\n defaultValue?: string | number | ReadonlyArray<string> | undefined;\n suppressContentEditableWarning?: boolean | undefined;\n suppressHydrationWarning?: boolean | undefined;\n\n // Standard HTML Attributes\n accessKey?: string | undefined;\n autoFocus?: boolean | undefined;\n className?: string | undefined;\n contentEditable?: Booleanish | \"inherit\" | undefined;\n contextMenu?: string | undefined;\n dir?: string | undefined;\n draggable?: Booleanish | undefined;\n hidden?: boolean | undefined;\n id?: string | undefined;\n lang?: string | undefined;\n nonce?: string | undefined;\n placeholder?: string | undefined;\n slot?: string | undefined;\n spellCheck?: Booleanish | undefined;\n style?: CSSProperties | undefined;\n tabIndex?: number | undefined;\n title?: string | undefined;\n translate?: 'yes' | 'no' | undefined;\n\n // Unknown\n radioGroup?: string | undefined; // <command>, <menuitem>\n\n // WAI-ARIA\n role?: AriaRole | undefined;\n\n // RDFa Attributes\n about?: string | undefined;\n content?: string | undefined;\n datatype?: string | undefined;\n inlist?: any;\n prefix?: string | undefined;\n property?: string | undefined;\n rel?: string | undefined;\n resource?: string | undefined;\n rev?: string | undefined;\n typeof?: string | undefined;\n vocab?: string | undefined;\n\n // Non-standard Attributes\n autoCapitalize?: string | undefined;\n autoCorrect?: string | undefined;\n autoSave?: string | undefined;\n color?: string | undefined;\n itemProp?: string | undefined;\n itemScope?: boolean | undefined;\n itemType?: string | undefined;\n itemID?: string | undefined;\n itemRef?: string | undefined;\n results?: number | undefined;\n security?: string | undefined;\n unselectable?: 'on' | 'off' | undefined;\n\n // Living Standard\n /**\n * Hints at the type of data that might be entered by the user while editing the element or its contents\n * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n */\n inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search' | undefined;\n /**\n * Specify that a standard HTML element should behave like a defined custom built-in element\n * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n */\n is?: string | undefined;\n }\n\n /**\n * For internal usage only.\n * Different release channels declare additional types of ReactNode this particular release channel accepts.\n * App or library types should never augment this interface.\n */\n interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}\n\n interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n // Standard HTML Attributes\n accept?: string | undefined;\n acceptCharset?: string | undefined;\n action?:\n | string\n | undefined\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS];\n allowFullScreen?: boolean | undefined;\n allowTransparency?: boolean | undefined;\n alt?: string | undefined;\n as?: string | undefined;\n async?: boolean | undefined;\n autoComplete?: string | undefined;\n autoPlay?: boolean | undefined;\n capture?: boolean | 'user' | 'environment' | undefined;\n cellPadding?: number | string | undefined;\n cellSpacing?: number | string | undefined;\n charSet?: string | undefined;\n challenge?: string | undefined;\n checked?: boolean | undefined;\n cite?: string | undefined;\n classID?: string | undefined;\n cols?: number | undefined;\n colSpan?: number | undefined;\n controls?: boolean | undefined;\n coords?: string | undefined;\n crossOrigin?: CrossOrigin;\n data?: string | undefined;\n dateTime?: string | undefined;\n default?: boolean | undefined;\n defer?: boolean | undefined;\n disabled?: boolean | undefined;\n download?: any;\n encType?: string | undefined;\n form?: string | undefined;\n formAction?:\n | string\n | undefined\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS];\n formEncType?: string | undefined;\n formMethod?: string | undefined;\n formNoValidate?: boolean | undefined;\n formTarget?: string | undefined;\n frameBorder?: number | string | undefined;\n headers?: string | undefined;\n height?: number | string | undefined;\n high?: number | undefined;\n href?: string | undefined;\n hrefLang?: string | undefined;\n htmlFor?: string | undefined;\n httpEquiv?: string | undefined;\n integrity?: string | undefined;\n keyParams?: string | undefined;\n keyType?: string | undefined;\n kind?: string | undefined;\n label?: string | undefined;\n list?: string | undefined;\n loop?: boolean | undefined;\n low?: number | undefined;\n manifest?: string | undefined;\n marginHeight?: number | undefined;\n marginWidth?: number | undefined;\n max?: number | string | undefined;\n maxLength?: number | undefined;\n media?: string | undefined;\n mediaGroup?: string | undefined;\n method?: string | undefined;\n min?: number | string | undefined;\n minLength?: number | undefined;\n multiple?: boolean | undefined;\n muted?: boolean | undefined;\n name?: string | undefined;\n noValidate?: boolean | undefined;\n open?: boolean | undefined;\n optimum?: number | undefined;\n pattern?: string | undefined;\n placeholder?: string | undefined;\n playsInline?: boolean | undefined;\n poster?: string | undefined;\n preload?: string | undefined;\n readOnly?: boolean | undefined;\n required?: boolean | undefined;\n reversed?: boolean | undefined;\n rows?: number | undefined;\n rowSpan?: number | undefined;\n sandbox?: string | undefined;\n scope?: string | undefined;\n scoped?: boolean | undefined;\n scrolling?: string | undefined;\n seamless?: boolean | undefined;\n selected?: boolean | undefined;\n shape?: string | undefined;\n size?: number | undefined;\n sizes?: string | undefined;\n span?: number | undefined;\n src?: string | undefined;\n srcDoc?: string | undefined;\n srcLang?: string | undefined;\n srcSet?: string | undefined;\n start?: number | undefined;\n step?: number | string | undefined;\n summary?: string | undefined;\n target?: string | undefined;\n type?: string | undefined;\n useMap?: string | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n width?: number | string | undefined;\n wmode?: string | undefined;\n wrap?: string | undefined;\n }\n\n type HTMLAttributeReferrerPolicy =\n | ''\n | 'no-referrer'\n | 'no-referrer-when-downgrade'\n | 'origin'\n | 'origin-when-cross-origin'\n | 'same-origin'\n | 'strict-origin'\n | 'strict-origin-when-cross-origin'\n | 'unsafe-url';\n\n type HTMLAttributeAnchorTarget =\n | '_self'\n | '_blank'\n | '_parent'\n | '_top'\n | (string & {});\n\n interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n download?: any;\n href?: string | undefined;\n hrefLang?: string | undefined;\n media?: string | undefined;\n ping?: string | undefined;\n target?: HTMLAttributeAnchorTarget | undefined;\n type?: string | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n }\n\n interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n alt?: string | undefined;\n coords?: string | undefined;\n download?: any;\n href?: string | undefined;\n hrefLang?: string | undefined;\n media?: string | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n shape?: string | undefined;\n target?: string | undefined;\n }\n\n interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n href?: string | undefined;\n target?: string | undefined;\n }\n\n interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n cite?: string | undefined;\n }\n\n interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n disabled?: boolean | undefined;\n form?: string | undefined;\n formAction?:\n | string\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS]\n | undefined;\n formEncType?: string | undefined;\n formMethod?: string | undefined;\n formNoValidate?: boolean | undefined;\n formTarget?: string | undefined;\n name?: string | undefined;\n type?: 'submit' | 'reset' | 'button' | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n height?: number | string | undefined;\n width?: number | string | undefined;\n }\n\n interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n span?: number | undefined;\n width?: number | string | undefined;\n }\n\n interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n span?: number | undefined;\n }\n\n interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n open?: boolean | undefined;\n onToggle?: ReactEventHandler<T> | undefined;\n }\n\n interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n cite?: string | undefined;\n dateTime?: string | undefined;\n }\n\n interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n onCancel?: ReactEventHandler<T> | undefined;\n onClose?: ReactEventHandler<T> | undefined;\n open?: boolean | undefined;\n }\n\n interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n height?: number | string | undefined;\n src?: string | undefined;\n type?: string | undefined;\n width?: number | string | undefined;\n }\n\n interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n disabled?: boolean | undefined;\n form?: string | undefined;\n name?: string | undefined;\n }\n\n interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n acceptCharset?: string | undefined;\n action?:\n | string\n | undefined\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS];\n autoComplete?: string | undefined;\n encType?: string | undefined;\n method?: string | undefined;\n name?: string | undefined;\n noValidate?: boolean | undefined;\n target?: string | undefined;\n }\n\n interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n manifest?: string | undefined;\n }\n\n interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n allow?: string | undefined;\n allowFullScreen?: boolean | undefined;\n allowTransparency?: boolean | undefined;\n /** @deprecated */\n frameBorder?: number | string | undefined;\n height?: number | string | undefined;\n loading?: \"eager\" | \"lazy\" | undefined;\n /** @deprecated */\n marginHeight?: number | undefined;\n /** @deprecated */\n marginWidth?: number | undefined;\n name?: string | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n sandbox?: string | undefined;\n /** @deprecated */\n scrolling?: string | undefined;\n seamless?: boolean | undefined;\n src?: string | undefined;\n srcDoc?: string | undefined;\n width?: number | string | undefined;\n }\n\n interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n alt?: string | undefined;\n crossOrigin?: CrossOrigin;\n decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n height?: number | string | undefined;\n loading?: \"eager\" | \"lazy\" | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n sizes?: string | undefined;\n src?: string | undefined;\n srcSet?: string | undefined;\n useMap?: string | undefined;\n width?: number | string | undefined;\n }\n\n interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n cite?: string | undefined;\n dateTime?: string | undefined;\n }\n\n type HTMLInputTypeAttribute =\n | 'button'\n | 'checkbox'\n | 'color'\n | 'date'\n | 'datetime-local'\n | 'email'\n | 'file'\n | 'hidden'\n | 'image'\n | 'month'\n | 'number'\n | 'password'\n | 'radio'\n | 'range'\n | 'reset'\n | 'search'\n | 'submit'\n | 'tel'\n | 'text'\n | 'time'\n | 'url'\n | 'week'\n | (string & {});\n\n interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n accept?: string | undefined;\n alt?: string | undefined;\n autoComplete?: string | undefined;\n capture?: boolean | 'user' | 'environment' | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n checked?: boolean | undefined;\n disabled?: boolean | undefined;\n enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;\n form?: string | undefined;\n formAction?:\n | string\n | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS]\n | undefined;\n formEncType?: string | undefined;\n formMethod?: string | undefined;\n formNoValidate?: boolean | undefined;\n formTarget?: string | undefined;\n height?: number | string | undefined;\n list?: string | undefined;\n max?: number | string | undefined;\n maxLength?: number | undefined;\n min?: number | string | undefined;\n minLength?: number | undefined;\n multiple?: boolean | undefined;\n name?: string | undefined;\n pattern?: string | undefined;\n placeholder?: string | undefined;\n readOnly?: boolean | undefined;\n required?: boolean | undefined;\n size?: number | undefined;\n src?: string | undefined;\n step?: number | string | undefined;\n type?: HTMLInputTypeAttribute | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n width?: number | string | undefined;\n\n onChange?: ChangeEventHandler<T> | undefined;\n }\n\n interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n challenge?: string | undefined;\n disabled?: boolean | undefined;\n form?: string | undefined;\n keyType?: string | undefined;\n keyParams?: string | undefined;\n name?: string | undefined;\n }\n\n interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n form?: string | undefined;\n htmlFor?: string | undefined;\n }\n\n interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n as?: string | undefined;\n crossOrigin?: CrossOrigin;\n fetchPriority?: \"high\" | \"low\" | \"auto\";\n href?: string | undefined;\n hrefLang?: string | undefined;\n integrity?: string | undefined;\n media?: string | undefined;\n imageSrcSet?: string | undefined;\n imageSizes?: string | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n sizes?: string | undefined;\n type?: string | undefined;\n charSet?: string | undefined;\n }\n\n interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n name?: string | undefined;\n }\n\n interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n type?: string | undefined;\n }\n\n interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n autoPlay?: boolean | undefined;\n controls?: boolean | undefined;\n controlsList?: string | undefined;\n crossOrigin?: CrossOrigin;\n loop?: boolean | undefined;\n mediaGroup?: string | undefined;\n muted?: boolean | undefined;\n playsInline?: boolean | undefined;\n preload?: string | undefined;\n src?: string | undefined;\n }\n\n interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n charSet?: string | undefined;\n httpEquiv?: string | undefined;\n name?: string | undefined;\n media?: string | undefined;\n content?: string | undefined;\n }\n\n interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n form?: string | undefined;\n high?: number | undefined;\n low?: number | undefined;\n max?: number | string | undefined;\n min?: number | string | undefined;\n optimum?: number | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n cite?: string | undefined;\n }\n\n interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n classID?: string | undefined;\n data?: string | undefined;\n form?: string | undefined;\n height?: number | string | undefined;\n name?: string | undefined;\n type?: string | undefined;\n useMap?: string | undefined;\n width?: number | string | undefined;\n wmode?: string | undefined;\n }\n\n interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n reversed?: boolean | undefined;\n start?: number | undefined;\n type?: '1' | 'a' | 'A' | 'i' | 'I' | undefined;\n }\n\n interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n disabled?: boolean | undefined;\n label?: string | undefined;\n }\n\n interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n disabled?: boolean | undefined;\n label?: string | undefined;\n selected?: boolean | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n form?: string | undefined;\n htmlFor?: string | undefined;\n name?: string | undefined;\n }\n\n interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n name?: string | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n max?: number | string | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n }\n\n interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n name?: string | undefined;\n }\n\n interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n async?: boolean | undefined;\n /** @deprecated */\n charSet?: string | undefined;\n crossOrigin?: CrossOrigin;\n defer?: boolean | undefined;\n integrity?: string | undefined;\n noModule?: boolean | undefined;\n referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n src?: string | undefined;\n type?: string | undefined;\n }\n\n interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n autoComplete?: string | undefined;\n disabled?: boolean | undefined;\n form?: string | undefined;\n multiple?: boolean | undefined;\n name?: string | undefined;\n required?: boolean | undefined;\n size?: number | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n onChange?: ChangeEventHandler<T> | undefined;\n }\n\n interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n height?: number | string | undefined;\n media?: string | undefined;\n sizes?: string | undefined;\n src?: string | undefined;\n srcSet?: string | undefined;\n type?: string | undefined;\n width?: number | string | undefined;\n }\n\n interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n media?: string | undefined;\n scoped?: boolean | undefined;\n type?: string | undefined;\n }\n\n interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n align?: \"left\" | \"center\" | \"right\" | undefined;\n bgcolor?: string | undefined;\n border?: number | undefined;\n cellPadding?: number | string | undefined;\n cellSpacing?: number | string | undefined;\n frame?: boolean | undefined;\n rules?: \"none\" | \"groups\" | \"rows\" | \"columns\" | \"all\" | undefined;\n summary?: string | undefined;\n width?: number | string | undefined;\n }\n\n interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n autoComplete?: string | undefined;\n cols?: number | undefined;\n dirName?: string | undefined;\n disabled?: boolean | undefined;\n form?: string | undefined;\n maxLength?: number | undefined;\n minLength?: number | undefined;\n name?: string | undefined;\n placeholder?: string | undefined;\n readOnly?: boolean | undefined;\n required?: boolean | undefined;\n rows?: number | undefined;\n value?: string | ReadonlyArray<string> | number | undefined;\n wrap?: string | undefined;\n\n onChange?: ChangeEventHandler<T> | undefined;\n }\n\n interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n colSpan?: number | undefined;\n headers?: string | undefined;\n rowSpan?: number | undefined;\n scope?: string | undefined;\n abbr?: string | undefined;\n height?: number | string | undefined;\n width?: number | string | undefined;\n valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n }\n\n interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n colSpan?: number | undefined;\n headers?: string | undefined;\n rowSpan?: number | undefined;\n scope?: string | undefined;\n abbr?: string | undefined;\n }\n\n interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n dateTime?: string | undefined;\n }\n\n interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n default?: boolean | undefined;\n kind?: string | undefined;\n label?: string | undefined;\n src?: string | undefined;\n srcLang?: string | undefined;\n }\n\n interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n height?: number | string | undefined;\n playsInline?: boolean | undefined;\n poster?: string | undefined;\n width?: number | string | undefined;\n disablePictureInPicture?: boolean | undefined;\n disableRemotePlayback?: boolean | undefined;\n }\n\n // this list is \"complete\" in that it contains every SVG attribute\n // that React supports, but the types can be improved.\n // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n //\n // The three broad type categories are (in order of restrictiveness):\n // - \"number | string\"\n // - \"string\"\n // - union of string literals\n interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n // React-specific Attributes\n suppressHydrationWarning?: boolean | undefined;\n\n // Attributes which also defined in HTMLAttributes\n // See comment in SVGDOMPropertyConfig.js\n className?: string | undefined;\n color?: string | undefined;\n height?: number | string | undefined;\n id?: string | undefined;\n lang?: string | undefined;\n max?: number | string | undefined;\n media?: string | undefined;\n method?: string | undefined;\n min?: number | string | undefined;\n name?: string | undefined;\n style?: CSSProperties | undefined;\n target?: string | undefined;\n type?: string | undefined;\n width?: number | string | undefined;\n\n // Other HTML properties supported by SVG elements in browsers\n role?: AriaRole | undefined;\n tabIndex?: number | undefined;\n crossOrigin?: CrossOrigin;\n\n // SVG Specific attributes\n accentHeight?: number | string | undefined;\n accumulate?: \"none\" | \"sum\" | undefined;\n additive?: \"replace\" | \"sum\" | undefined;\n alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\" | undefined;\n allowReorder?: \"no\" | \"yes\" | undefined;\n alphabetic?: number | string | undefined;\n amplitude?: number | string | undefined;\n arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n ascent?: number | string | undefined;\n attributeName?: string | undefined;\n attributeType?: string | undefined;\n autoReverse?: Booleanish | undefined;\n azimuth?: number | string | undefined;\n baseFrequency?: number | string | undefined;\n baselineShift?: number | string | undefined;\n baseProfile?: number | string | undefined;\n bbox?: number | string | undefined;\n begin?: number | string | undefined;\n bias?: number | string | undefined;\n by?: number | string | undefined;\n calcMode?: number | string | undefined;\n capHeight?: number | string | undefined;\n clip?: number | string | undefined;\n clipPath?: string | undefined;\n clipPathUnits?: number | string | undefined;\n clipRule?: number | string | undefined;\n colorInterpolation?: number | string | undefined;\n colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n colorProfile?: number | string | undefined;\n colorRendering?: number | string | undefined;\n contentScriptType?: number | string | undefined;\n contentStyleType?: number | string | undefined;\n cursor?: number | string | undefined;\n cx?: number | string | undefined;\n cy?: number | string | undefined;\n d?: string | undefined;\n decelerate?: number | string | undefined;\n descent?: number | string | undefined;\n diffuseConstant?: number | string | undefined;\n direction?: number | string | undefined;\n display?: number | string | undefined;\n divisor?: number | string | undefined;\n dominantBaseline?: number | string | undefined;\n dur?: number | string | undefined;\n dx?: number | string | undefined;\n dy?: number | string | undefined;\n edgeMode?: number | string | undefined;\n elevation?: number | string | undefined;\n enableBackground?: number | string | undefined;\n end?: number | string | undefined;\n exponent?: number | string | undefined;\n externalResourcesRequired?: Booleanish | undefined;\n fill?: string | undefined;\n fillOpacity?: number | string | undefined;\n fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n filter?: string | undefined;\n filterRes?: number | string | undefined;\n filterUnits?: number | string | undefined;\n floodColor?: number | string | undefined;\n floodOpacity?: number | string | undefined;\n focusable?: Booleanish | \"auto\" | undefined;\n fontFamily?: string | undefined;\n fontSize?: number | string | undefined;\n fontSizeAdjust?: number | string | undefined;\n fontStretch?: number | string | undefined;\n fontStyle?: number | string | undefined;\n fontVariant?: number | string | undefined;\n fontWeight?: number | string | undefined;\n format?: number | string | undefined;\n fr?: number | string | undefined;\n from?: number | string | undefined;\n fx?: number | string | undefined;\n fy?: number | string | undefined;\n g1?: number | string | undefined;\n g2?: number | string | undefined;\n glyphName?: number | string | undefined;\n glyphOrientationHorizontal?: number | string | undefined;\n glyphOrientationVertical?: number | string | undefined;\n glyphRef?: number | string | undefined;\n gradientTransform?: string | undefined;\n gradientUnits?: string | undefined;\n hanging?: number | string | undefined;\n horizAdvX?: number | string | undefined;\n horizOriginX?: number | string | undefined;\n href?: string | undefined;\n ideographic?: number | string | undefined;\n imageRendering?: number | string | undefined;\n in2?: number | string | undefined;\n in?: string | undefined;\n intercept?: number | string | undefined;\n k1?: number | string | undefined;\n k2?: number | string | undefined;\n k3?: number | string | undefined;\n k4?: number | string | undefined;\n k?: number | string | undefined;\n kernelMatrix?: number | string | undefined;\n kernelUnitLength?: number | string | undefined;\n kerning?: number | string | undefined;\n keyPoints?: number | string | undefined;\n keySplines?: number | string | undefined;\n keyTimes?: number | string | undefined;\n lengthAdjust?: number | string | undefined;\n letterSpacing?: number | string | undefined;\n lightingColor?: number | string | undefined;\n limitingConeAngle?: number | string | undefined;\n local?: number | string | undefined;\n markerEnd?: string | undefined;\n markerHeight?: number | string | undefined;\n markerMid?: string | undefined;\n markerStart?: string | undefined;\n markerUnits?: number | string | undefined;\n markerWidth?: number | string | undefined;\n mask?: string | undefined;\n maskContentUnits?: number | string | undefined;\n maskUnits?: number | string | undefined;\n mathematical?: number | string | undefined;\n mode?: number | string | undefined;\n numOctaves?: number | string | undefined;\n offset?: number | string | undefined;\n opacity?: number | string | undefined;\n operator?: number | string | undefined;\n order?: number | string | undefined;\n orient?: number | string | undefined;\n orientation?: number | string | undefined;\n origin?: number | string | undefined;\n overflow?: number | string | undefined;\n overlinePosition?: number | string | undefined;\n overlineThickness?: number | string | undefined;\n paintOrder?: number | string | undefined;\n panose1?: number | string | undefined;\n path?: string | undefined;\n pathLength?: number | string | undefined;\n patternContentUnits?: string | undefined;\n patternTransform?: number | string | undefined;\n patternUnits?: string | undefined;\n pointerEvents?: number | string | undefined;\n points?: string | undefined;\n pointsAtX?: number | string | undefined;\n pointsAtY?: number | string | undefined;\n pointsAtZ?: number | string | undefined;\n preserveAlpha?: Booleanish | undefined;\n preserveAspectRatio?: string | undefined;\n primitiveUnits?: number | string | undefined;\n r?: number | string | undefined;\n radius?: number | string | undefined;\n refX?: number | string | undefined;\n refY?: number | string | undefined;\n renderingIntent?: number | string | undefined;\n repeatCount?: number | string | undefined;\n repeatDur?: number | string | undefined;\n requiredExtensions?: number | string | undefined;\n requiredFeatures?: number | string | undefined;\n restart?: number | string | undefined;\n result?: string | undefined;\n rotate?: number | string | undefined;\n rx?: number | string | undefined;\n ry?: number | string | undefined;\n scale?: number | string | undefined;\n seed?: number | string | undefined;\n shapeRendering?: number | string | undefined;\n slope?: number | string | undefined;\n spacing?: number | string | undefined;\n specularConstant?: number | string | undefined;\n specularExponent?: number | string | undefined;\n speed?: number | string | undefined;\n spreadMethod?: string | undefined;\n startOffset?: number | string | undefined;\n stdDeviation?: number | string | undefined;\n stemh?: number | string | undefined;\n stemv?: number | string | undefined;\n stitchTiles?: number | string | undefined;\n stopColor?: string | undefined;\n stopOpacity?: number | string | undefined;\n strikethroughPosition?: number | string | undefined;\n strikethroughThickness?: number | string | undefined;\n string?: number | string | undefined;\n stroke?: string | undefined;\n strokeDasharray?: string | number | undefined;\n strokeDashoffset?: string | number | undefined;\n strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n strokeMiterlimit?: number | string | undefined;\n strokeOpacity?: number | string | undefined;\n strokeWidth?: number | string | undefined;\n surfaceScale?: number | string | undefined;\n systemLanguage?: number | string | undefined;\n tableValues?: number | string | undefined;\n targetX?: number | string | undefined;\n targetY?: number | string | undefined;\n textAnchor?: string | undefined;\n textDecoration?: number | string | undefined;\n textLength?: number | string | undefined;\n textRendering?: number | string | undefined;\n to?: number | string | undefined;\n transform?: string | undefined;\n u1?: number | string | undefined;\n u2?: number | string | undefined;\n underlinePosition?: number | string | undefined;\n underlineThickness?: number | string | undefined;\n unicode?: number | string | undefined;\n unicodeBidi?: number | string | undefined;\n unicodeRange?: number | string | undefined;\n unitsPerEm?: number | string | undefined;\n vAlphabetic?: number | string | undefined;\n values?: string | undefined;\n vectorEffect?: number | string | undefined;\n version?: string | undefined;\n vertAdvY?: number | string | undefined;\n vertOriginX?: number | string | undefined;\n vertOriginY?: number | string | undefined;\n vHanging?: number | string | undefined;\n vIdeographic?: number | string | undefined;\n viewBox?: string | undefined;\n viewTarget?: number | string | undefined;\n visibility?: number | string | undefined;\n vMathematical?: number | string | undefined;\n widths?: number | string | undefined;\n wordSpacing?: number | string | undefined;\n writingMode?: number | string | undefined;\n x1?: number | string | undefined;\n x2?: number | string | undefined;\n x?: number | string | undefined;\n xChannelSelector?: string | undefined;\n xHeight?: number | string | undefined;\n xlinkActuate?: string | undefined;\n xlinkArcrole?: string | undefined;\n xlinkHref?: string | undefined;\n xlinkRole?: string | undefined;\n xlinkShow?: string | undefined;\n xlinkTitle?: string | undefined;\n xlinkType?: string | undefined;\n xmlBase?: string | undefined;\n xmlLang?: string | undefined;\n xmlns?: string | undefined;\n xmlnsXlink?: string | undefined;\n xmlSpace?: string | undefined;\n y1?: number | string | undefined;\n y2?: number | string | undefined;\n y?: number | string | undefined;\n yChannelSelector?: string | undefined;\n z?: number | string | undefined;\n zoomAndPan?: string | undefined;\n }\n\n interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n allowFullScreen?: boolean | undefined;\n allowpopups?: boolean | undefined;\n autosize?: boolean | undefined;\n blinkfeatures?: string | undefined;\n disableblinkfeatures?: string | undefined;\n disableguestresize?: boolean | undefined;\n disablewebsecurity?: boolean | undefined;\n guestinstance?: string | undefined;\n httpreferrer?: string | undefined;\n nodeintegration?: boolean | undefined;\n partition?: string | undefined;\n plugins?: boolean | undefined;\n preload?: string | undefined;\n src?: string | undefined;\n useragent?: string | undefined;\n webpreferences?: string | undefined;\n }\n\n //\n // React.DOM\n // ----------------------------------------------------------------------\n\n interface ReactHTML {\n a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n }\n\n interface ReactSVG {\n animate: SVGFactory;\n circle: SVGFactory;\n clipPath: SVGFactory;\n defs: SVGFactory;\n desc: SVGFactory;\n ellipse: SVGFactory;\n feBlend: SVGFactory;\n feColorMatrix: SVGFactory;\n feComponentTransfer: SVGFactory;\n feComposite: SVGFactory;\n feConvolveMatrix: SVGFactory;\n feDiffuseLighting: SVGFactory;\n feDisplacementMap: SVGFactory;\n feDistantLight: SVGFactory;\n feDropShadow: SVGFactory;\n feFlood: SVGFactory;\n feFuncA: SVGFactory;\n feFuncB: SVGFactory;\n feFuncG: SVGFactory;\n feFuncR: SVGFactory;\n feGaussianBlur: SVGFactory;\n feImage: SVGFactory;\n feMerge: SVGFactory;\n feMergeNode: SVGFactory;\n feMorphology: SVGFactory;\n feOffset: SVGFactory;\n fePointLight: SVGFactory;\n feSpecularLighting: SVGFactory;\n feSpotLight: SVGFactory;\n feTile: SVGFactory;\n feTurbulence: SVGFactory;\n filter: SVGFactory;\n foreignObject: SVGFactory;\n g: SVGFactory;\n image: SVGFactory;\n line: SVGFactory;\n linearGradient: SVGFactory;\n marker: SVGFactory;\n mask: SVGFactory;\n metadata: SVGFactory;\n path: SVGFactory;\n pattern: SVGFactory;\n polygon: SVGFactory;\n polyline: SVGFactory;\n radialGradient: SVGFactory;\n rect: SVGFactory;\n stop: SVGFactory;\n svg: SVGFactory;\n switch: SVGFactory;\n symbol: SVGFactory;\n text: SVGFactory;\n textPath: SVGFactory;\n tspan: SVGFactory;\n use: SVGFactory;\n view: SVGFactory;\n }\n\n interface ReactDOM extends ReactHTML, ReactSVG { }\n\n //\n // React.PropTypes\n // ----------------------------------------------------------------------\n\n type Validator<T> = PropTypes.Validator<T>;\n\n type Requireable<T> = PropTypes.Requireable<T>;\n\n type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n type WeakValidationMap<T> = {\n [K in keyof T]?: null extends T[K]\n ? Validator<T[K] | null | undefined>\n : undefined extends T[K]\n ? Validator<T[K] | null | undefined>\n : Validator<T[K]>\n };\n\n interface ReactPropTypes {\n any: typeof PropTypes.any;\n array: typeof PropTypes.array;\n bool: typeof PropTypes.bool;\n func: typeof PropTypes.func;\n number: typeof PropTypes.number;\n object: typeof PropTypes.object;\n string: typeof PropTypes.string;\n node: typeof PropTypes.node;\n element: typeof PropTypes.element;\n instanceOf: typeof PropTypes.instanceOf;\n oneOf: typeof PropTypes.oneOf;\n oneOfType: typeof PropTypes.oneOfType;\n arrayOf: typeof PropTypes.arrayOf;\n objectOf: typeof PropTypes.objectOf;\n shape: typeof PropTypes.shape;\n exact: typeof PropTypes.exact;\n }\n\n //\n // React.Children\n // ----------------------------------------------------------------------\n\n /**\n * @deprecated - Use `typeof React.Children` instead.\n */\n // Sync with type of `const Children`.\n interface ReactChildren {\n map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n count(children: any): number;\n only<C>(children: C): C extends any[] ? never : C;\n toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n }\n\n //\n // Browser Interfaces\n // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n // ----------------------------------------------------------------------\n\n interface AbstractView {\n styleMedia: StyleMedia;\n document: Document;\n }\n\n interface Touch {\n identifier: number;\n target: EventTarget;\n screenX: number;\n screenY: number;\n clientX: number;\n clientY: number;\n pageX: number;\n pageY: number;\n }\n\n interface TouchList {\n [index: number]: Touch;\n length: number;\n item(index: number): Touch;\n identifiedTouch(identifier: number): Touch;\n }\n\n //\n // Error Interfaces\n // ----------------------------------------------------------------------\n interface ErrorInfo {\n /**\n * Captures which component contained the exception, and its ancestors.\n */\n componentStack: string;\n }\n\n // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts\n namespace JSX {\n type ElementType = GlobalJSXElementType;\n interface Element extends GlobalJSXElement {}\n interface ElementClass extends GlobalJSXElementClass {}\n interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}\n interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}\n\n type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;\n\n interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}\n interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}\n interface IntrinsicElements extends GlobalJSXIntrinsicElements {}\n }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n // Distribute over P in case it is a union type\n P extends any\n // If props is type any, use propTypes definitions\n ? IsExactlyAny<P> extends true ? T :\n // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n string extends keyof P ? P :\n // Prefer declared types which are not exactly any\n & Pick<P, NotExactlyAnyPropertyKeys<P>>\n // For props which are exactly any, use the type inferred from propTypes if present\n & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n // Keep leftover props not specified in propTypes\n & Pick<P, Exclude<keyof P, keyof T>>\n : never;\n\ntype InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n ? string extends keyof P ? P :\n & Pick<P, Exclude<keyof P, keyof D>>\n & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n : C extends { propTypes: infer T; }\n ? MergePropTypes<P, PropTypes.InferProps<T>>\n : C extends { defaultProps: infer D; }\n ? Defaultize<P, D>\n : P;\n\ndeclare global {\n /**\n * @deprecated Use `React.JSX` instead of the global `JSX` namespace.\n */\n namespace JSX {\n // We don't just alias React.ElementType because React.ElementType\n // historically does more than we need it to.\n // E.g. it also contains .propTypes and so TS also verifies the declared\n // props type does match the declared .propTypes.\n // But if libraries declared their .propTypes but not props type,\n // or they mismatch, you won't be able to use the class component\n // as a JSX.ElementType.\n // We could fix this everywhere but we're ultimately not interested in\n // .propTypes assignability so we might as well drop it entirely here to\n // reduce the work of the type-checker.\n // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>\n type ElementType = string | React.JSXElementConstructor<any>;\n interface Element extends React.ReactElement<any, any> { }\n interface ElementClass extends React.Component<any> {\n render(): React.ReactNode;\n }\n interface ElementAttributesProperty { props: {}; }\n interface ElementChildrenAttribute { children: {}; }\n\n // We can't recurse forever because `type` can't be self-referential;\n // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n ? ReactManagedAttributes<U, P>\n : ReactManagedAttributes<T, P>\n : ReactManagedAttributes<C, P>;\n\n interface IntrinsicAttributes extends React.Attributes { }\n interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n interface IntrinsicElements {\n // HTML\n a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n // SVG\n svg: React.SVGProps<SVGSVGElement>;\n\n animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n animateMotion: React.SVGProps<SVGElement>;\n animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n circle: React.SVGProps<SVGCircleElement>;\n clipPath: React.SVGProps<SVGClipPathElement>;\n defs: React.SVGProps<SVGDefsElement>;\n desc: React.SVGProps<SVGDescElement>;\n ellipse: React.SVGProps<SVGEllipseElement>;\n feBlend: React.SVGProps<SVGFEBlendElement>;\n feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n feComposite: React.SVGProps<SVGFECompositeElement>;\n feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n feFlood: React.SVGProps<SVGFEFloodElement>;\n feFuncA: React.SVGProps<SVGFEFuncAElement>;\n feFuncB: React.SVGProps<SVGFEFuncBElement>;\n feFuncG: React.SVGProps<SVGFEFuncGElement>;\n feFuncR: React.SVGProps<SVGFEFuncRElement>;\n feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n feImage: React.SVGProps<SVGFEImageElement>;\n feMerge: React.SVGProps<SVGFEMergeElement>;\n feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n feOffset: React.SVGProps<SVGFEOffsetElement>;\n fePointLight: React.SVGProps<SVGFEPointLightElement>;\n feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n feTile: React.SVGProps<SVGFETileElement>;\n feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n filter: React.SVGProps<SVGFilterElement>;\n foreignObject: React.SVGProps<SVGForeignObjectElement>;\n g: React.SVGProps<SVGGElement>;\n image: React.SVGProps<SVGImageElement>;\n line: React.SVGLineElementAttributes<SVGLineElement>;\n linearGradient: React.SVGProps<SVGLinearGradientElement>;\n marker: React.SVGProps<SVGMarkerElement>;\n mask: React.SVGProps<SVGMaskElement>;\n metadata: React.SVGProps<SVGMetadataElement>;\n mpath: React.SVGProps<SVGElement>;\n path: React.SVGProps<SVGPathElement>;\n pattern: React.SVGProps<SVGPatternElement>;\n polygon: React.SVGProps<SVGPolygonElement>;\n polyline: React.SVGProps<SVGPolylineElement>;\n radialGradient: React.SVGProps<SVGRadialGradientElement>;\n rect: React.SVGProps<SVGRectElement>;\n stop: React.SVGProps<SVGStopElement>;\n switch: React.SVGProps<SVGSwitchElement>;\n symbol: React.SVGProps<SVGSymbolElement>;\n text: React.SVGTextElementAttributes<SVGTextElement>;\n textPath: React.SVGProps<SVGTextPathElement>;\n tspan: React.SVGProps<SVGTSpanElement>;\n use: React.SVGProps<SVGUseElement>;\n view: React.SVGProps<SVGViewElement>;\n }\n }\n}\n\n// React.JSX needs to point to global.JSX to keep global module augmentations intact.\n// But we can't access global.JSX so we need to create these aliases instead.\n// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX\ntype GlobalJSXElementType = JSX.ElementType;\ninterface GlobalJSXElement extends JSX.Element {}\ninterface GlobalJSXElementClass extends JSX.ElementClass {}\ninterface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}\ninterface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}\n\ntype GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;\n\ninterface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}\ninterface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}\n\ninterface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}\n","ReactDOMType":"// Type definitions for React (react-dom) 18.2\n// Project: https://reactjs.org\n// Definitions by: Asana <https://asana.com>\n// AssureSign <http://www.assuresign.com>\n// Microsoft <https://microsoft.com>\n// MartynasZilinskas <https://github.com/MartynasZilinskas>\n// Josh Rutherford <https://github.com/theruther4d>\n// Jessica Franco <https://github.com/Jessidhia>\n// Sebastian Silbermann <https://github.com/eps1lon>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react-dom/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\nexport as namespace ReactDOM;\n\nimport {\n ReactInstance, Component, ComponentState,\n ReactElement, FunctionComponentElement, CElement,\n DOMAttributes, DOMElement, ReactNode, ReactPortal\n} from 'react';\n\nexport function findDOMNode(instance: ReactInstance | null | undefined): Element | null | Text;\nexport function unmountComponentAtNode(container: Element | DocumentFragment): boolean;\n\nexport function createPortal(children: ReactNode, container: Element | DocumentFragment, key?: null | string): ReactPortal;\n\nexport const version: string;\nexport const render: Renderer;\nexport const hydrate: Renderer;\n\nexport function flushSync<R>(fn: () => R): R;\nexport function flushSync<A, R>(fn: (a: A) => R, a: A): R;\n\nexport function unstable_batchedUpdates<A, R>(callback: (a: A) => R, a: A): R;\nexport function unstable_batchedUpdates<R>(callback: () => R): R;\n\nexport function unstable_renderSubtreeIntoContainer<T extends Element>(\n parentComponent: Component<any>,\n element: DOMElement<DOMAttributes<T>, T>,\n container: Element,\n callback?: (element: T) => any): T;\nexport function unstable_renderSubtreeIntoContainer<P, T extends Component<P, ComponentState>>(\n parentComponent: Component<any>,\n element: CElement<P, T>,\n container: Element,\n callback?: (component: T) => any): T;\nexport function unstable_renderSubtreeIntoContainer<P>(\n parentComponent: Component<any>,\n element: ReactElement<P>,\n container: Element,\n callback?: (component?: Component<P, ComponentState> | Element) => any): Component<P, ComponentState> | Element | void;\n\nexport type Container = Element | Document | DocumentFragment;\n\nexport interface Renderer {\n // Deprecated(render): The return value is deprecated.\n // In future releases the render function's return type will be void.\n\n <T extends Element>(\n element: DOMElement<DOMAttributes<T>, T>,\n container: Container| null,\n callback?: () => void\n ): T;\n\n (\n element: Array<DOMElement<DOMAttributes<any>, any>>,\n container: Container| null,\n callback?: () => void\n ): Element;\n\n (\n element: FunctionComponentElement<any> | Array<FunctionComponentElement<any>>,\n container: Container| null,\n callback?: () => void\n ): void;\n\n <P, T extends Component<P, ComponentState>>(\n element: CElement<P, T>,\n container: Container| null,\n callback?: () => void\n ): T;\n\n (\n element: Array<CElement<any, Component<any, ComponentState>>>,\n container: Container| null,\n callback?: () => void\n ): Component<any, ComponentState>;\n\n <P>(\n element: ReactElement<P>,\n container: Container| null,\n callback?: () => void\n ): Component<P, ComponentState> | Element | void;\n\n (\n element: ReactElement[],\n container: Container| null,\n callback?: () => void\n ): Component<any, ComponentState> | Element | void;\n}\n"},"__N_SSG":true}